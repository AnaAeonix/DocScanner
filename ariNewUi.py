# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:/Users/pdas/AppData/Local/Temp/ariNewUiweViXd.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import Stackresource_rc
import UiRes_rc
import camResource_rc
from PyQt5 import QtCore, QtGui, QtWidgets
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QVBoxLayout, QScrollArea, QWidget, QLabel
from PyQt5.QtGui import QImage, QPixmap, QFont
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import QLabel
import numpy as np


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1366, 768)
        MainWindow.setStyleSheet("# MainWindow{\n"
                                 "display: flex;\n"
                                 "flex-direction: column;\n"
                                 "align-item : center;\n"
                                 "}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.pdf_btn = QtWidgets.QPushButton(self.centralwidget)
        self.pdf_btn.setGeometry(QtCore.QRect(610, 20, 211, 31))
        self.pdf_btn.setStyleSheet("QPushButton {\n"
                                   "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                   "        border-radius: 20px; \n"
                                   "    color: white; /* Text color */\n"
                                   "    font-weight: bold;\n"
                                   "border:none; /* Border color */\n"
                                   "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                   "    margin:0px; /* Margin to create distance between buttons */\n"
                                   "}\n"
                                   " QPushButton {\n"
                                   "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                   "    color: white; /* Text color */\n"
                                   "    font-weight: bold;\n"
                                   "\n"
                                   "    padding: 10px 20px;\n"
                                   "        /*height:50px;*/\n"
                                   "margin: 0px;\n"
                                   "        \n"
                                   "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                   "    }\n"
                                   "QPushButton:hover {\n"
                                   "        background-color:#073c6d;\n"
                                   "    }")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/pdf.svg"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pdf_btn.setIcon(icon)
        self.pdf_btn.setIconSize(QtCore.QSize(20, 20))
        self.pdf_btn.setCheckable(True)
        self.pdf_btn.setAutoExclusive(True)
        self.pdf_btn.setFlat(False)
        self.pdf_btn.setObjectName("pdf_btn")

        self.show_page = QtWidgets.QLabel(self.centralwidget)
        # self.show_page.setGeometry(QtCore.QRect(700, 10, 231, 601))
        self.show_page.setFrameShape(QtWidgets.QFrame.Box)
        self.show_page.setText("")
        self.show_page.setStyleSheet("#show_page {"
                                     #  "border: 2px solid #0e86f6;"  # Change 'red' to desired border color
                                     "border: 2px solid qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);"
                                     "border-radius: 10px;"   # Adjust the value for desired curve
                                     "}")
        # Set fixed width and height
        # self.show_page.setFixedSize(231, 980)

        # Adjust the size of show_page to accommodate buttons
        self.show_page.setMinimumSize(231, 880)  # Set minimum size
        self.show_page.setMaximumSize(231, 880)  # Set maximum size
        self.show_page.setObjectName("show_page")
        # Create QVBoxLayout for buttons
        self.buttons_layout = QtWidgets.QVBoxLayout()
        # Add QLabel to layout
        self.layout.addWidget(self.show_page, alignment=QtCore.Qt.AlignRight)
        # Set layout to central widget
        # self.centralwidget.setLayout(self.layout)
        # self.btn_label = QtWidgets.QLabel(self.centralwidget)
        # self.btn_label.setGeometry(QtCore.QRect(206, 479, 381, 41))
        # self.btn_label.setFrameShape(QtWidgets.QFrame.NoFrame)
        # self.btn_label.setText("")
        # self.btn_label.setObjectName("btn_label")
        # self.buttons_layout.addWidget(self.btn_label)
        # self.pdf_btn = QtWidgets.QPushButton(self.centralwidget)
        # self.pdf_btn.setGeometry(QtCore.QRect(610, 20, 211, 31))
        # self.pdf_btn.setStyleSheet("QPushButton {\n"
        #                            "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
        #                            "        border-radius: 20px; \n"
        #                            "    color: white; /* Text color */\n"
        #                            "    font-weight: bold;\n"
        #                            "border:none; /* Border color */\n"
        #                            "    padding: 10px 10px; /* Adjust padding as needed */\n"
        #                            "    margin:0px; /* Margin to create distance between buttons */\n"
        #                            "}\n"
        #                            " QPushButton {\n"
        #                            "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
        #                            "    color: white; /* Text color */\n"
        #                            "    font-weight: bold;\n"
        #                            "\n"
        #                            "    padding: 10px 20px;\n"
        #                            "        /*height:50px;*/\n"
        #                            "margin: 0px;\n"
        #                            "        \n"
        #                            "        /* border-bottom: 1px solid #b0b0b0; */\n"
        #                            "    }\n"
        #                            "QPushButton:hover {\n"
        #                            "        background-color:#073c6d;\n"
        #                            "    }")
        # icon = QtGui.QIcon()
        # icon.addPixmap(QtGui.QPixmap(":/newPrefix/pdf.svg"),
        #                QtGui.QIcon.Normal, QtGui.QIcon.Off)
        # self.pdf_btn.setIcon(icon)
        # self.pdf_btn.setIconSize(QtCore.QSize(20, 20))
        # self.pdf_btn.setCheckable(True)
        # self.pdf_btn.setAutoExclusive(True)
        # self.pdf_btn.setFlat(False)
        # self.pdf_btn.setObjectName("pdf_btn")
        self.buttons_layout.addWidget(
            self.pdf_btn, alignment=QtCore.Qt.AlignTop)
        self.jpeg_btn = QtWidgets.QPushButton(self.centralwidget)
        self.jpeg_btn.setGeometry(QtCore.QRect(710, 60, 101, 31))
        self.jpeg_btn.setStyleSheet("QPushButton {\n"
                                    "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                    "        border-radius: 20px; \n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "border:none; /* Border color */\n"
                                    "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                    "    margin:0px; /* Margin to create distance between buttons */\n"
                                    "}\n"
                                    " QPushButton {\n"
                                    "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "\n"
                                    "    padding: 10px 20px;\n"
                                    "        /*height:50px;*/\n"
                                    "margin: 0px;\n"
                                    "        \n"
                                    "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                    "    }\n"
                                    " QPushButton:hover {\n"
                                    "        background-color:#073c6d\n"
                                    "    }")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/pdf.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.jpeg_btn.setIcon(icon1)
        self.jpeg_btn.setIconSize(QtCore.QSize(20, 20))
        self.jpeg_btn.setObjectName("jpeg_btn")
        self.buttons_layout.addWidget(
            self.jpeg_btn, alignment=QtCore.Qt.AlignTop)
        self.edit_btn = QtWidgets.QPushButton(self.centralwidget)
        self.edit_btn.setGeometry(QtCore.QRect(710, 60, 101, 31))
        self.edit_btn.setStyleSheet("QPushButton {\n"
                                    "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                    "        border-radius: 20px; \n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "border:none; /* Border color */\n"
                                    "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                    "    margin:0px; /* Margin to create distance between buttons */\n"
                                    "}\n"
                                    " QPushButton {\n"
                                    "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "\n"
                                    "    padding: 10px 20px;\n"
                                    "        /*height:50px;*/\n"
                                    "margin: 0px;\n"
                                    "        \n"
                                    "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                    "    }\n"
                                    " QPushButton:hover {\n"
                                    "        background-color:#073c6d\n"
                                    "    }")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/edit1.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.edit_btn.setIcon(icon1)
        self.edit_btn.setObjectName("edit_btn")
        self.buttons_layout.addWidget(
            self.edit_btn, alignment=QtCore.Qt.AlignTop)
        self.settings_btn = QtWidgets.QPushButton(self.centralwidget)
        self.settings_btn.setGeometry(QtCore.QRect(820, 60, 101, 31))
        self.settings_btn.setStyleSheet("QPushButton {\n"
                                        "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                        "        border-radius: 20px; \n"
                                        "    color: white; /* Text color */\n"
                                        "    font-weight: bold;\n"
                                        "border:none; /* Border color */\n"
                                        "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                        "    margin:0px; /* Margin to create distance between buttons */\n"
                                        "}\n"
                                        " QPushButton {\n"
                                        "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                        "    color: white; /* Text color */\n"
                                        "    font-weight: bold;\n"
                                        "\n"
                                        "    padding: 10px 20px;\n"
                                        "        /*height:50px;*/\n"
                                        "margin: 0px;\n"
                                        "        \n"
                                        "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                        "    }\n"
                                        " QPushButton:hover {\n"
                                        "        background-color:#073c6d\n"
                                        "    }")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/settings.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.settings_btn.setIcon(icon1)
        self.settings_btn.setObjectName("settings_btn")
        self.buttons_layout.addWidget(
            self.settings_btn, alignment=QtCore.Qt.AlignTop)
        self.delete_btn = QtWidgets.QPushButton(self.centralwidget)
        self.delete_btn.setGeometry(QtCore.QRect(920, 60, 101, 31))
        self.delete_btn.setStyleSheet("QPushButton {\n"
                                      "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                      "        border-radius: 20px; \n"
                                      "    color: white; /* Text color */\n"
                                      "    font-weight: bold;\n"
                                      "border:none; /* Border color */\n"
                                      "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                      "    margin:0px; /* Margin to create distance between buttons */\n"
                                      "}\n"
                                      " QPushButton {\n"
                                      "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                      "    color: white; /* Text color */\n"
                                      "    font-weight: bold;\n"
                                      "\n"
                                      "    padding: 10px 20px;\n"
                                      "        /*height:50px;*/\n"
                                      "margin: 0px;\n"
                                      "        \n"
                                      "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                      "    }\n"
                                      " QPushButton:hover {\n"
                                      "        background-color:#073c6d\n"
                                      "    }")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/newPrefix/discard.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.delete_btn.setIcon(icon2)
        self.delete_btn.setObjectName("delete_btn")
        self.buttons_layout.addWidget(
            self.delete_btn, alignment=QtCore.Qt.AlignTop)
        self.hor_line = QtWidgets.QFrame(self.centralwidget)
        self.hor_line.setGeometry(QtCore.QRect(730, 100, 171, 16))
        self.hor_line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.hor_line.setStyleSheet("QFrame {"
                                    # "border: 2px solid #0e86f6;"  # Change '#0e86f6' to desired border color
                                    "border: 2px solid qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);"
                                    "border-radius: 10px;"   # Adjust the value for desired curve
                                    "}")
        self.hor_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.hor_line.setObjectName("hor_line")
        self.buttons_layout.addWidget(
            self.hor_line, alignment=QtCore.Qt.AlignTop)

        # Create additional QLabel below the hor_line
        self.additional_label = QtWidgets.QLabel(self.centralwidget)
        self.additional_label.setGeometry(QtCore.QRect(
            730, 120, 171, 900))  # Adjust geometry as needed
        # self.additional_label.setFrameShape(QtWidgets.QFrame.Box)
        # self.additional_label.setStyleSheet("QLabel {"
        #                                      "border: 2px solid #0e86f6;"  # Change '#0e86f6' to desired border color
        #                                      "border-radius: 10px;"   # Adjust the value for desired curve
        #                                      "}")
        self.additional_label.setObjectName("additional_label")
        self.additional_label.setStyleSheet("#additional_label {"
                                            #  "border: 2px solid #0e86f6;"  # Change 'red' to desired border color
                                            "border: 2px solid qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);"
                                            "border-radius: 10px;"   # Adjust the value for desired curve
                                            "}")
        self.additional_label.setFixedSize(210, 635)
        self.buttons_layout.addWidget(
            self.additional_label, alignment=QtCore.Qt.AlignTop)

        # Add some stretch to move the buttons to the bottom
        self.buttons_layout.addStretch()

        # Set layout for show_page
        self.show_page.setLayout(self.buttons_layout)

        # Set layout to central widget
        self.centralwidget.setLayout(self.layout)
        # Set layout to central widget
        self.centralwidget.setLayout(self.layout)

        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 40, 1650, 1051))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.cam_label = QtWidgets.QLabel(self.page)
        self.cam_label.setGeometry(QtCore.QRect(300, 80, 991, 731))
        self.cam_label.setFrameShape(QtWidgets.QFrame.Box)
        self.cam_label.setText("")
        self.cam_label.setAlignment(QtCore.Qt.AlignCenter)
        self.cam_label.setObjectName("cam_label")
        self.cam_label.setStyleSheet("QLabel {"
                                     #  "border: 2px solid #0e86f6;"  # Change 'red' to desired border color
                                     "border: 2px solid qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);"
                                     "border-radius: 10px;"   # Adjust the value for desired curve
                                     "}")
        self.cam_drop_down = QtWidgets.QComboBox(self.page)
        self.cam_drop_down.setGeometry(QtCore.QRect(700, 20, 181, 22))
        self.cam_drop_down.setObjectName("cam_drop_down")
        self.shutter_btn = QtWidgets.QPushButton(self.page)
        self.shutter_btn.setGeometry(QtCore.QRect(750, 880, 101, 61))
        self.shutter_btn.setText("")
        self.shutter_btn.setStyleSheet("QPushButton {\n"
                                       "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                       "        border-radius: 20px; \n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "border:none; /* Border color */\n"
                                       "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                       "    margin:0px; /* Margin to create distance between buttons */\n"
                                       "}\n"
                                       " QPushButton {\n"
                                       "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "\n"
                                       "    padding: 10px 20px;\n"
                                       "        /*height:50px;*/\n"
                                       "margin: 0px;\n"
                                       "        \n"
                                       "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                       "    }\n"
                                       " QPushButton:hover {\n"
                                       "        background-color:#073c6d\n"
                                       "    }")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(
            ":/newPrefix/shutter.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.shutter_btn.setIcon(icon3)
        self.shutter_btn.setIconSize(QtCore.QSize(40, 40))
        self.shutter_btn.setCheckable(True)
        self.shutter_btn.setAutoExclusive(True)
        self.shutter_btn.setFlat(True)
        self.shutter_btn.setObjectName("shutter_btn")
        # self.res_drop_down = QtWidgets.QComboBox(self.page)
        # self.res_drop_down.setGeometry(QtCore.QRect(400, 550, 181, 22))
        # self.res_drop_down.setObjectName("res_drop_down")
        self.ai_btn = QtWidgets.QRadioButton(self.page)
        self.ai_btn.setGeometry(QtCore.QRect(60, 20, 102, 27))
        self.ai_btn.setCheckable(True)
        self.ai_btn.setAutoExclusive(False)
        self.ai_btn.setObjectName("ai_btn")

        # Create a QFont object
        font = QtGui.QFont()
        font.setPointSize(16)  # Set the desired font size

        # Apply the font to the button
        self.ai_btn.setFont(font)
        self.foc_drop = QtWidgets.QComboBox(self.page)
        self.foc_drop.setGeometry(QtCore.QRect(530, 20, 101, 22))
        self.foc_drop.addItems(["Auto Focus", "Fixed Focus"])
        self.foc_drop.setObjectName("foc_drop")
        self.foc_label = QtWidgets.QLabel(self.page)
        self.foc_label.setGeometry(QtCore.QRect(460, 20, 61, 21))
        self.foc_label.setObjectName("foc_label")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.menu = QtWidgets.QWidget(self.page_2)
        self.menu.setGeometry(QtCore.QRect(10, 25, 200, 880))
        self.menu.setStyleSheet("#menu {\n"
                                "        background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                "        width:50px;\n"
                                "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                "    }\n"
                                "\n"
                                "    /* style for QPushButton and QLabel */\n"
                                "    #menu QPushButton {\n"
                                "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                "    color: white; /* Text color */\n"
                                "    font-weight: bold;\n"
                                " border: 2px solid #4CAF50; /* Border color */\n"
                                "    padding: 10px 20px;\n"
                                "        /*height:50px;*/\n"
                                "margin: 10px;\n"
                                "        \n"
                                "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                "    }\n"
                                "#menu Qlabel{\n"
                                "border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                "    color: white; /* Text color */\n"
                                "    font-weight: bold;\n"
                                " border: 2px solid #4CAF50; /* Border color */\n"
                                "    padding: 10px 20px;\n"
                                "        /*height:50px;*/\n"
                                "margin: 10px;\n"
                                "}\n"
                                "\n"
                                "    #menu QPushButton:hover {\n"
                                "        background-color:#073c6d\n"
                                "    }\n"
                                "")
        self.menu.setObjectName("menu")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.menu)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setSpacing(0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setSpacing(0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.dash_label = QtWidgets.QLabel(self.menu)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.dash_label.setFont(font)
        self.dash_label.setStyleSheet(" #menu QLabel{\n"
                                      "padding-top: 10px;\n"
                                      "    color: white; /* Text color */\n"
                                      "    font-weight: bold;\n"
                                      " \n"
                                      "}")
        self.dash_label.setAlignment(QtCore.Qt.AlignCenter)
        self.dash_label.setObjectName("dash_label")
        self.verticalLayout_16.addWidget(self.dash_label)
        self.adjust_btn = QtWidgets.QPushButton(self.menu)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.adjust_btn.setFont(font)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/newPrefix/adjust.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon3.addPixmap(QtGui.QPixmap(":/newPrefix/adjust.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.adjust_btn.setIcon(icon3)
        self.adjust_btn.setCheckable(True)
        self.adjust_btn.setAutoExclusive(True)
        self.adjust_btn.setFlat(False)
        self.adjust_btn.setObjectName("adjust_btn")
        self.verticalLayout_16.addWidget(self.adjust_btn)
        self.color_btn = QtWidgets.QPushButton(self.menu)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/newPrefix/colorFilter.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon4.addPixmap(QtGui.QPixmap(":/newPrefix/colorFilter.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.color_btn.setIcon(icon4)
        self.color_btn.setCheckable(True)
        self.color_btn.setAutoExclusive(True)
        self.color_btn.setObjectName("color_btn")
        self.verticalLayout_16.addWidget(self.color_btn)
        self.rotate_btn = QtWidgets.QPushButton(self.menu)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/newPrefix/rotate.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rotate_btn.setIcon(icon5)
        self.rotate_btn.setObjectName("rotate_btn")
        self.verticalLayout_16.addWidget(self.rotate_btn)
        self.crop_btn = QtWidgets.QPushButton(self.menu)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/newPrefix/crop1.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon6.addPixmap(QtGui.QPixmap(":/newPrefix/crop1.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.crop_btn.setIcon(icon6)
        self.crop_btn.setCheckable(True)
        self.crop_btn.setAutoExclusive(True)
        self.crop_btn.setObjectName("crop_btn")
        self.verticalLayout_16.addWidget(self.crop_btn)
        self.cam_back = QtWidgets.QPushButton(self.menu)
        self.cam_back.setStyleSheet("QPushButton {\n"
                                    "\n"
                                    "        border-radius: 20px; \n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "border:none; /* Border color */\n"
                                    "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                    "    margin: 10px; /* Margin to create distance between buttons */\n"
                                    "}")
        self.cam_back.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/newPrefix/camera_back.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cam_back.setIcon(icon7)
        self.cam_back.setIconSize(QtCore.QSize(35, 35))
        self.cam_back.setCheckable(True)
        self.cam_back.setAutoExclusive(True)
        self.cam_back.setObjectName("cam_back")
        self.verticalLayout_16.addWidget(self.cam_back)
        self.verticalLayout_15.addLayout(self.verticalLayout_16)
        spacerItem = QtWidgets.QSpacerItem(
            20, 322, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_15.addItem(spacerItem)
        self.show_image = QtWidgets.QLabel(self.page_2)
        self.show_image.setGeometry(QtCore.QRect(480, 30, 921, 661))
        self.show_image.setFrameShape(QtWidgets.QFrame.Box)
        self.show_image.setText("")
        self.show_image.setStyleSheet("QLabel {"
                                      #   "border: 2px solid #0e86f6;"  # Change 'red' to desired border color
                                      "border: 2px solid qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);"
                                      "border-radius: 10px;"   # Adjust the value for desired curve
                                      "}")
        self.show_image.setObjectName("show_image")
        label_focus_policy = self.show_image.focusPolicy()
        print(label_focus_policy)
        self.edit_stack = QtWidgets.QStackedWidget(self.page_2)
        self.edit_stack.setGeometry(QtCore.QRect(480, 720, 871, 150))
        self.edit_stack.setObjectName("edit_stack")
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.horizontalSlider = QtWidgets.QSlider(self.page_3)
        self.horizontalSlider.setGeometry(QtCore.QRect(40, 50, 260, 22))
        self.horizontalSlider.setRange(-100, 100)
        self.horizontalSlider.setValue(0)
        self.horizontalSlider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider.setTickInterval(10)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider_2 = QtWidgets.QSlider(self.page_3)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(500, 50, 260, 22))
        self.horizontalSlider_2.setRange(0, 100)
        self.horizontalSlider_2.setValue(0)
        self.horizontalSlider_2.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_2.setTickInterval(10)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.label = QtWidgets.QLabel(self.page_3)
        self.label.setGeometry(QtCore.QRect(180, 10, 81, 41))
        self.label.setStyleSheet("QLabel {\n"
                                 "    font-size: 16px; /* Change the font size to 16 pixels */\n"
                                 "    color: #3020ee; /* Change the font color to red */\n"
                                 "}")
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.page_3)
        self.label_2.setGeometry(QtCore.QRect(680, 10, 71, 41))
        self.label_2.setStyleSheet("QLabel {\n"
                                   "    font-size: 16px; /* Change the font size to 16 pixels */\n"
                                   "    color: #3020ee; /* Change the font color to red */\n"
                                   "}")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.ok_btn = QtWidgets.QPushButton(self.page_3)
        self.ok_btn.setGeometry(QtCore.QRect(340, 40, 41, 41))
        self.ok_btn.setStyleSheet("QPushButton {\n"
                                       "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                       "        border-radius: 20px; \n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "border:none; /* Border color */\n"
                                       "    padding: 1px 1px; /* Adjust padding as needed */\n"
                                       "    margin:0px; /* Margin to create distance between buttons */\n"
                                       "}\n"
                                       " QPushButton {\n"
                                       "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "\n"
                                       "    padding: 1px 2px;\n"
                                       "        /*height:50px;*/\n"
                                       "margin: 0px;\n"
                                       "        \n"
                                       "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                       "    }\n"
                                       " QPushButton:hover {\n"
                                       "        background-color:#073c6d\n"
                                       "    }")
        self.ok_btn.setObjectName("ok_btn")
        self.ok1_btn = QtWidgets.QPushButton(self.page_3)
        self.ok1_btn.setGeometry(QtCore.QRect(800, 40, 41, 41))
        self.ok1_btn.setStyleSheet("QPushButton {\n"
                                  "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                  "        border-radius: 20px; \n"
                                  "    color: white; /* Text color */\n"
                                  "    font-weight: bold;\n"
                                  "border:none; /* Border color */\n"
                                  "    padding: 1px 1px; /* Adjust padding as needed */\n"
                                  "    margin:0px; /* Margin to create distance between buttons */\n"
                                  "}\n"
                                  " QPushButton {\n"
                                  "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                  "    color: white; /* Text color */\n"
                                  "    font-weight: bold;\n"
                                  "\n"
                                  "    padding: 1px 2px;\n"
                                  "        /*height:50px;*/\n"
                                  "margin: 0px;\n"
                                  "        \n"
                                  "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                  "    }\n"
                                  " QPushButton:hover {\n"
                                  "        background-color:#073c6d\n"
                                  "    }")
        self.ok1_btn.setObjectName("ok1_btn")
        self.edit_stack.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.enhance_btn = QtWidgets.QPushButton(self.page_4)
        self.enhance_btn.setGeometry(QtCore.QRect(100, 0, 211, 41))
        self.enhance_btn.setStyleSheet("QPushButton {\n"
                                       "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                       "        border-radius: 20px; \n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "border:none; /* Border color */\n"
                                       "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                       "    margin:0px; /* Margin to create distance between buttons */\n"
                                       "}\n"
                                       " QPushButton {\n"
                                       "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "\n"
                                       "    padding: 10px 20px;\n"
                                       "        /*height:50px;*/\n"
                                       "margin: 0px;\n"
                                       "        \n"
                                       "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                       "    }\n"
                                       " QPushButton:hover {\n"
                                       "        background-color:#073c6d\n"
                                       "    }")
        self.enhance_btn.setObjectName("enhance_btn")
        self.mag1_btn = QtWidgets.QPushButton(self.page_4)
        self.mag1_btn.setGeometry(QtCore.QRect(604, 0, 211, 41))
        self.mag1_btn.setStyleSheet("QPushButton {\n"
                                    "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                    "        border-radius: 20px; \n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "border:none; /* Border color */\n"
                                    "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                    "    margin:0px; /* Margin to create distance between buttons */\n"
                                    "}\n"
                                    " QPushButton {\n"
                                    "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "\n"
                                    "    padding: 10px 20px;\n"
                                    "        /*height:50px;*/\n"
                                    "margin: 0px;\n"
                                    "        \n"
                                    "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                    "    }\n"
                                    " QPushButton:hover {\n"
                                    "        background-color:#073c6d\n"
                                    "    }")
        self.mag1_btn.setObjectName("mag1_btn")
        self.color_btn_2 = QtWidgets.QPushButton(self.page_4)
        self.color_btn_2.setGeometry(QtCore.QRect(100, 50, 211, 41))
        self.color_btn_2.setStyleSheet("QPushButton {\n"
                                       "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                       "        border-radius: 20px; \n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "border:none; /* Border color */\n"
                                       "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                       "    margin:0px; /* Margin to create distance between buttons */\n"
                                       "}\n"
                                       " QPushButton {\n"
                                       "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "\n"
                                       "    padding: 10px 20px;\n"
                                       "        /*height:50px;*/\n"
                                       "margin: 0px;\n"
                                       "        \n"
                                       "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                       "    }\n"
                                       " QPushButton:hover {\n"
                                       "        background-color:#073c6d\n"
                                       "    }")
        self.color_btn_2.setObjectName("color_btn_2")
        self.mag2_btn = QtWidgets.QPushButton(self.page_4)
        self.mag2_btn.setGeometry(QtCore.QRect(604, 50, 211, 41))
        self.mag2_btn.setStyleSheet("QPushButton {\n"
                                    "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                    "        border-radius: 20px; \n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "border:none; /* Border color */\n"
                                    "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                    "    margin:0px; /* Margin to create distance between buttons */\n"
                                    "}\n"
                                    " QPushButton {\n"
                                    "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "\n"
                                    "    padding: 10px 20px;\n"
                                    "        /*height:50px;*/\n"
                                    "margin: 0px;\n"
                                    "        \n"
                                    "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                    "    }\n"
                                    " QPushButton:hover {\n"
                                    "        background-color:#073c6d\n"
                                    "    }")
        self.mag2_btn.setObjectName("mag2_btn")
        self.edit_stack.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.rotateleft_btn = QtWidgets.QPushButton(self.page_5)
        self.rotateleft_btn.setGeometry(QtCore.QRect(100, 30, 211, 41))
        self.rotateleft_btn.setStyleSheet("QPushButton {\n"
                                          "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                          "        border-radius: 20px; \n"
                                          "    color: white; /* Text color */\n"
                                          "    font-weight: bold;\n"
                                          "border:none; /* Border color */\n"
                                          "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                          "    margin:0px; /* Margin to create distance between buttons */\n"
                                          "}\n"
                                          " QPushButton {\n"
                                          "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                          "    color: white; /* Text color */\n"
                                          "    font-weight: bold;\n"
                                          "\n"
                                          "    padding: 10px 20px;\n"
                                          "        /*height:50px;*/\n"
                                          "margin: 0px;\n"
                                          "        \n"
                                          "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                          "    }\n"
                                          " QPushButton:hover {\n"
                                          "        background-color:#073c6d\n"
                                          "    }")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/newPrefix/rotateLeft.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rotateleft_btn.setIcon(icon9)
        self.rotateleft_btn.setObjectName("rotateleft_btn")
        self.rotateright_btn = QtWidgets.QPushButton(self.page_5)
        self.rotateright_btn.setGeometry(QtCore.QRect(604, 30, 211, 41))
        self.rotateright_btn.setStyleSheet("QPushButton {\n"
                                           "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                           "        border-radius: 20px; \n"
                                           "    color: white; /* Text color */\n"
                                           "    font-weight: bold;\n"
                                           "border:none; /* Border color */\n"
                                           "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                           "    margin:0px; /* Margin to create distance between buttons */\n"
                                           "}\n"
                                           " QPushButton {\n"
                                           "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                           "    color: white; /* Text color */\n"
                                           "    font-weight: bold;\n"
                                           "\n"
                                           "    padding: 10px 20px;\n"
                                           "        /*height:50px;*/\n"
                                           "margin: 0px;\n"
                                           "        \n"
                                           "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                           "    }\n"
                                           " QPushButton:hover {\n"
                                           "        background-color:#073c6d\n"
                                           "    }")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(
            ":/newPrefix/rotateRight.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rotateright_btn.setIcon(icon10)
        self.rotateright_btn.setObjectName("rotateright_btn")
        self.edit_stack.addWidget(self.page_5)
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.edit_stack.addWidget(self.page_6)
        self.undo_btn = QtWidgets.QPushButton(self.page_2)
        self.undo_btn.setGeometry(QtCore.QRect(350, 850, 211, 41))
        self.undo_btn.setStyleSheet("QPushButton {\n"
                                    "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                    "        border-radius: 20px; \n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "border:none; /* Border color */\n"
                                    "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                    "    margin:0px; /* Margin to create distance between buttons */\n"
                                    "}\n"
                                    " QPushButton {\n"
                                    "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "\n"
                                    "    padding: 10px 20px;\n"
                                    "        /*height:50px;*/\n"
                                    "margin: 0px;\n"
                                    "        \n"
                                    "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                    "    }\n"
                                    " QPushButton:hover {\n"
                                    "        background-color:#073c6d\n"
                                    "    }")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/newPrefix/undo1.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.undo_btn.setIcon(icon8)
        self.undo_btn.setObjectName("undo_btn")
        self.discard_btn = QtWidgets.QPushButton(self.page_2)
        self.discard_btn.setGeometry(QtCore.QRect(840, 850, 211, 41))
        self.discard_btn.setStyleSheet("QPushButton {\n"
                                       "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                       "        border-radius: 20px; \n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "border:none; /* Border color */\n"
                                       "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                       "    margin:0px; /* Margin to create distance between buttons */\n"
                                       "}\n"
                                       " QPushButton {\n"
                                       "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                       "    color: white; /* Text color */\n"
                                       "    font-weight: bold;\n"
                                       "\n"
                                       "    padding: 10px 20px;\n"
                                       "        /*height:50px;*/\n"
                                       "margin: 0px;\n"
                                       "        \n"
                                       "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                       "    }\n"
                                       " QPushButton:hover {\n"
                                       "        background-color:#073c6d\n"
                                       "    }")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/newPrefix/discard.svg"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.discard_btn.setIcon(icon9)
        self.discard_btn.setObjectName("discard_btn")
        self.save_btn = QtWidgets.QPushButton(self.page_2)
        self.save_btn.setGeometry(QtCore.QRect(1350, 850, 211, 41))
        self.save_btn.setStyleSheet("QPushButton {\n"
                                    "background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                                    "        border-radius: 20px; \n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "border:none; /* Border color */\n"
                                    "    padding: 10px 10px; /* Adjust padding as needed */\n"
                                    "    margin:0px; /* Margin to create distance between buttons */\n"
                                    "}\n"
                                    " QPushButton {\n"
                                    "        border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                                    "    color: white; /* Text color */\n"
                                    "    font-weight: bold;\n"
                                    "\n"
                                    "    padding: 10px 20px;\n"
                                    "        /*height:50px;*/\n"
                                    "margin: 0px;\n"
                                    "        \n"
                                    "        /* border-bottom: 1px solid #b0b0b0; */\n"
                                    "    }\n"
                                    "\n"
                                    " QPushButton:hover {\n"
                                    "        background-color:#073c6d\n"
                                    "    }")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/newPrefix/save.svg"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_btn.setIcon(icon10)
        self.save_btn.setObjectName("save_btn")
        self.stackedWidget.addWidget(self.page_2)
        self.nav = QtWidgets.QWidget(self.centralwidget)
        self.nav.setGeometry(QtCore.QRect(0, 0, 1980, 40))
        self.nav.setStyleSheet("#nav {\n"
                               "        background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #8a2be2, stop:0.5 #0e86f6, stop:1 #a78bfa);\n"
                               "        width:50px;\n"
                               "        /*border-radius: 10px; *//* Adjust the value to change the curve radius */\n"
                               "    }\n"
                               "\n"
                               "    /* style for QPushButton and QLabel */\n"
                               "    #nav QPushButton {\n"
                               "        border-radius: 1px; /* Adjust the value to change the curve radius */\n"
                               "    color: white; /* Text color */\n"
                               "    font-weight: bold;\n"
                               " /*border: 2px solid #4CAF50; *//* Border color */\n"
                               "    padding: 10px 20px;\n"
                               "        /*height:50px;*/\n"
                               "margin: 10px;\n"
                               "        \n"
                               "        /* border-bottom: 1px solid #b0b0b0; */\n"
                               "    }\n"
                               "#nav Qlabel{\n"
                               "border-radius: 10px; /* Adjust the value to change the curve radius */\n"
                               "    color: white; /* Text color */\n"
                               "    font-weight: bold;\n"
                               " border: 2px solid #4CAF50; /* Border color */\n"
                               "    padding: 10px 20px;\n"
                               "        /*height:50px;*/\n"
                               "margin: 10px;\n"
                               "}\n"
                               "\n"
                               "    #nav QPushButton:hover {\n"
                               "        background-color:#073c6d\n"
                               "    }\n"
                               "")
        self.nav.setObjectName("nav")
        self.label_3 = QtWidgets.QLabel(self.nav)
        self.label_3.setGeometry(QtCore.QRect(10, 5, 31, 30))
        self.label_3.setMinimumSize(QtCore.QSize(20, 20))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap(":/newPrefix/logo (1).svg"))
        self.label_3.setScaledContents(True)
        self.label_3.setObjectName("label_3")
        self.name = QtWidgets.QLabel(self.nav)
        self.name.setGeometry(QtCore.QRect(50, -10, 461, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.name.setFont(font)
        self.name.setStyleSheet("#name{\n"
                                "    color: white; /* Text color */\n"
                                "    font-weight: bold;\n"
                                "}\n"
                                "\n"
                                "")
        self.name.setAlignment(QtCore.Qt.AlignBottom | QtCore.Qt.AlignJustify)
        self.name.setObjectName("name")
        self.minimize = QtWidgets.QPushButton(self.nav)
        self.minimize.setGeometry(QtCore.QRect(1830, -10, 51, 61))
        self.minimize.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/newPrefix/minimize.svg"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.minimize.setIcon(icon13)
        self.minimize.setIconSize(QtCore.QSize(18, 18))
        self.minimize.setObjectName("minimize")
        self.close = QtWidgets.QPushButton(self.nav)
        self.close.setGeometry(QtCore.QRect(1870, -10, 51, 61))
        self.close.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/newPrefix/close.svg"),
                         QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.close.setIcon(icon14)
        self.close.setIconSize(QtCore.QSize(20, 20))
        self.close.setObjectName("close")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.edit_stack.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DocScanner"))
        self.pdf_btn.setText(_translate("MainWindow", " Export to PDF"))
        self.edit_btn.setText(_translate("MainWindow", "Edit"))
        self.jpeg_btn.setText(_translate("MainWindow", "Export to JPEG"))
        self.delete_btn.setText(_translate("MainWindow", "Delete"))
        self.dash_label.setText(_translate("MainWindow", "Customize"))
        self.adjust_btn.setText(_translate("MainWindow", "Adjust"))
        self.color_btn.setText(_translate("MainWindow", "Color Mode"))
        self.rotate_btn.setText(_translate("MainWindow", "Rotate"))
        self.crop_btn.setText(_translate("MainWindow", "Crop"))
        self.label.setText(_translate("MainWindow", "Contrast"))
        self.label_2.setText(_translate("MainWindow", "Sharpness"))
        self.enhance_btn.setText(_translate("MainWindow", "Enhance"))
        self.mag1_btn.setText(_translate("MainWindow", "Magic Color 1"))
        self.color_btn_2.setText(_translate("MainWindow", "Color"))
        self.mag2_btn.setText(_translate("MainWindow", "Magic Color 2"))
        self.rotateleft_btn.setText(_translate("MainWindow", " Left"))
        self.rotateright_btn.setText(_translate("MainWindow", " Right"))
        self.undo_btn.setText(_translate("MainWindow", "Undo"))
        self.discard_btn.setText(_translate("MainWindow", "Discard"))
        self.save_btn.setText(_translate("MainWindow", "Save"))
        self.ok_btn.setText(_translate("MainWindow", "OK"))
        self.ok1_btn.setText(_translate("MainWindow", "OK"))
        self.settings_btn.setText(_translate("MainWindow", "Settings"))
        self.name.setText(_translate("MainWindow", "Aeonix Document Scanner"))
        self.ai_btn.setText(_translate("MainWindow", "AI Mode"))
        self.foc_label.setText(_translate("MainWindow", "Set Focus:"))


class VideoStream:
    def __init__(self, parent_label: QLabel, camera_index):
        self.video = cv2.VideoCapture()

        self.points = None
        self.firstTime = True
        self.parent_label = parent_label
        self.set_resolution()
        self.timer = None
        self.camera_change_thread = None  # Thread for camera switching
        self.scan_document = False
        self.checked= False
        self.ai_crop = None
        self.current_focus = 0

    def set_resolution(self):
        # Check if camera is open
        if not self.video.isOpened():
            print("Error opening camera")
            return

        # Check if 4K resolution is supported
        # Typo fix in height value
        self.video.set(cv2.CAP_PROP_FRAME_WIDTH, 3840)
        self.video.set(cv2.CAP_PROP_FRAME_HEIGHT, 2160)
        width = int(self.video.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(self.video.get(cv2.CAP_PROP_FRAME_HEIGHT))

        print(width)
        print(height)
        # if width == 3840 and height == 2160:
        #     print("Using 4K resolution")
        # else:
        #     self.video.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
        #     self.video.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
        #     print("Using 1080p resolution")
        # ... (rest of your set_resolution logic)

    def display_camera_feed(self):
        if not self.video.isOpened():
            # Display error message if camera not open
            font = QFont()
            font.setPointSize(30)
            self.parent_label.setFont(font)
            if self.firstTime:
                self.parent_label.setText(
                    "<p style='font-size:20pt'>Please Select the Camera...</p>")
            else:
                self.parent_label.setText(
                    "<p style='font-size:20pt'>Changing Camera...</p>")
            return

        ret, frame = self.video.read()
        if ret:
            self.firstTime = False

            # (h, w) = frame.shape[:2]
            # center = (w / 2, h / 2)
            # M = cv2.getRotationMatrix2D(center, 45, 1.0)
                # rotated_frame = cv2.warpAffine(frame, M, (w, h))
            if self.points is not None:
                cv2.polylines(frame, [np.array(self.points)], True,(0, 255, 0), 6)
            rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame_resized = cv2.resize(rgb_image, (640, 480))
            h, w, ch = frame_resized.shape
            bytes_per_line = ch * w
            q_img = QImage(frame_resized.data, w, h,
                            bytes_per_line, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(q_img)
            self.parent_label.setPixmap(pixmap.scaled(
                    self.parent_label.size(), Qt.KeepAspectRatio))

                # self.parent_label.setFixedSize(w, h)
        else:
                # Display loader while camera is changing
            self.show_loader()
    
    def display_camera_feed1(self,checked):
        if not self.video.isOpened():
            # Display error message if camera not open
            font = QFont()
            font.setPointSize(30)
            self.parent_label.setFont(font)
            if self.firstTime:
                self.parent_label.setText(
                    "<p style='font-size:20pt'>Please Select the Camera...</p>")
            else:
                self.parent_label.setText(
                    "<p style='font-size:20pt'>Changing Camera...</p>")
            return

        ret, frame = self.video.read()

        if ret:
            self.firstTime = False

            if self.points is not None:
                cv2.polylines(
                    frame, [np.array(self.points)], True, (0, 255, 0), 6)

            # Check if contour detection is enabled
            if checked:
                self.scan_document = True
                if self.scan_document:
                    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                kernel = np.ones((5, 5), np.uint8)
                dilation = cv2.dilate(gray, kernel, iterations=5)
                blur = cv2.GaussianBlur(dilation, (3, 3), 0)
                blur = cv2.erode(blur, kernel, iterations=5)
                edge = cv2.Canny(blur, 100, 200)

                t = 300
                j = 0
                linesP = None
                while j < 8 and t > 0:
                    try:
                        linesP = cv2.HoughLines(edge, 1, np.pi / 180, t)
                        if linesP is not None:
                            j = linesP.shape[0]
                        else:
                            j = 0
                    except:
                        j = 0
                    t -= 10

                if linesP is not None:
                    lines = linesP.reshape(linesP.shape[0], 2)
                    lu = []
                    for c, l in enumerate(lines):
                        rho, theta = l
                        for lt in lines[c + 1:]:
                            if lt[0] != l[0]:
                                k = abs(lt - l) < [50, 0.5]
                                if k[0] and k[1]:
                                    break
                        else:
                            lu.append(l)

                    if len(lu) >= 4:
                        lr = np.asarray(lu[:4])
                        intersections = self.points_inter(lr)

                        if len(intersections) >= 4:
                            p = np.array(intersections[:4]).reshape(4, 2)
                            

                            r = np.zeros((4, 2), dtype="float32")
                            s = np.sum(p, axis=1)
                            r[0] = p[np.argmin(s)]
                            r[2] = p[np.argmax(s)]
                            d = np.diff(p, axis=1)
                            r[1] = p[np.argmin(d)]
                            r[3] = p[np.argmax(d)]
                            (tl, tr, br, bl) = r
                            wA = np.sqrt((tl[0] - tr[0]) **
                                         2 + (tl[1] - tr[1])**2)
                            wB = np.sqrt((bl[0] - br[0]) **
                                         2 + (bl[1] - br[1])**2)
                            maxW = max(int(wA), int(wB))
                            hA = np.sqrt((tl[0] - bl[0]) **
                                         2 + (tl[1] - bl[1])**2)
                            hB = np.sqrt((tr[0] - br[0]) **
                                         2 + (tr[1] - br[1])**2)
                            maxH = max(int(hA), int(hB))
                            ds = np.array(
                                [[0, 0], [maxW - 1, 0], [maxW - 1, maxH - 1], [0, maxH - 1]], dtype="float32")
                            transformMatrix = cv2.getPerspectiveTransform(r, ds)
                            scan = cv2.warpPerspective(
                                gray, transformMatrix, (maxW, maxH))
                            # T = threshold_local(
                            #     scan, 21, offset=10, method="gaussian")
                            # scanBW = (scan > T).astype("uint8") * 255

                            # Drawing detected lines and intersection points on the original image
                            for line in lr:
                                rho, theta = line
                                a = np.cos(theta)
                                b = np.sin(theta)
                                x0 = a * rho
                                y0 = b * rho
                                pt1 = (int(x0 + 1000 * (-b)),
                                       int(y0 + 1000 * a))
                                pt2 = (int(x0 - 1000 * (-b)),
                                       int(y0 - 1000 * a))
                                # cv2.line(frame, pt1, pt2, (0, 255, 0), 4)

                            for pt in p:
                                cv2.circle(frame, tuple(pt), 30, (0, 0, 255), -1)

                            self.ai_crop = p

            rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame_resized = cv2.resize(rgb_image, (640, 480))
            h, w, ch = frame_resized.shape
            bytes_per_line = ch * w
            q_img = QImage(frame_resized.data, w, h,
                           bytes_per_line, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(q_img)
            self.parent_label.setPixmap(pixmap.scaled(
                self.parent_label.size(), Qt.KeepAspectRatio))
        else:
            # Display loader while camera is changing
            self.show_loader()
    
    # def display_camera_feed1(self, checked):
    #     self.biggest_contour = None
    #     self.max_area = 0
    #     if not self.video.isOpened():
    #         # Display error message if camera not open
    #         font = QFont()
    #         font.setPointSize(30)
    #         self.parent_label.setFont(font)
    #         if self.firstTime:
    #             self.parent_label.setText(
    #                 "<p style='font-size:20pt'>Please Select the Camera...</p>")
    #         else:
    #             self.parent_label.setText(
    #                 "<p style='font-size:20pt'>Changing Camera...</p>")
    #         return

    #     ret, frame = self.video.read()

    #     if ret:
    #         self.firstTime = False

    #         if self.points is not None:
    #             cv2.polylines(
    #                 frame, [np.array(self.points)], True, (0, 255, 0), 3)

    #         # Check if contour detection is enabled
    #         if checked:
    #             self.detect_contours = True
    #             if self.detect_contours:
    #                 gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    #                 blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    #                 edged = cv2.Canny(blurred, 75, 200)
    #                 contours, _ = cv2.findContours(
    #                     edged, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    #                 contours = sorted(
    #                     contours, key=cv2.contourArea, reverse=True)[:5]
    #                 for c in contours:
    #                     # Approximate the contour
    #                     peri = cv2.arcLength(c, True)
    #                     approx = cv2.approxPolyDP(c, 0.02 * peri, True)
    #                     if len(approx) == 4:
    #                         # Return approx
    #                         area = cv2.contourArea(approx)
    #                         if area > self.max_area:
    #                             self.biggest_contour = approx
    #                             self.max_area = area
    #                         # Minimum area threshold to avoid noise
    #                         elif self.biggest_contour is not None and area < self.max_area and area > 1000:
    #                             self.biggest_contour = approx
    #                             self.max_area = area

    #         # Convert frame to RGB
    #         rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    #         # Resize frame to fit display
    #         frame_resized = cv2.resize(rgb_image, (640, 480))
    #         h, w, ch = frame_resized.shape
    #         bytes_per_line = ch * w

    #         # Calculate the scaling factors
    #         original_height, original_width = frame.shape[:2]
    #         scale_x = w / original_width
    #         scale_y = h / original_height

    #         # Scale the contour points if a contour is found
    #         if self.biggest_contour is not None:
    #             scaled_contour = self.biggest_contour.copy()
    #             scaled_contour[:, :, 0] = scaled_contour[:, :, 0] * scale_x
    #             scaled_contour[:, :, 1] = scaled_contour[:, :, 1] * scale_y
    #             cv2.drawContours(
    #                 frame_resized, [scaled_contour], -1, (0, 255, 0), 6)
    #             self.order_points(self.biggest_contour.reshape(4, 2))

    #         q_img = QImage(frame_resized.data, w, h,
    #                     bytes_per_line, QImage.Format_RGB888)
    #         pixmap = QPixmap.fromImage(q_img)
    #         self.parent_label.setPixmap(pixmap.scaled(
    #             self.parent_label.size(), Qt.KeepAspectRatio))
    #     else:
    #         # Display loader while camera is changing
    #         self.show_loader()


    def change_camera(self, camera_index):
        # Stop the timer if it's running
        if self.timer is not None:
            self.timer.stop()

        # Create a thread for camera switching (optional, but recommended for responsiveness)
        self.camera_change_thread = threading.Thread(
            target=self._change_camera_in_thread, args=(camera_index,))
        self.camera_change_thread.start()
        # Display loader immediately
        self.show_loader()

    def _change_camera_in_thread(self, camera_index):
        # Release the current video capture
        self.video.release()

        # Open the new camera capture
        self.video = cv2.VideoCapture(camera_index, cv2.CAP_DSHOW)
        self.set_resolution()

        # Create a QTimer object and connect it to the display_camera_feed function (in main thread)
        self.timer = QTimer()
        self.timer.timeout.connect(self.display_camera_feed1)
        self.timer.start(10)  # Start the timer with a 10ms interval

    def show_loader(self):
        font = QFont()
        font.setPointSize(30)
        self.parent_label.setFont(font)
        self.parent_label.setAlignment(Qt.AlignCenter)
        self.parent_label.setText(
            "<p style='font-size:20pt'>Changing Camera...</p>")

    def l_inter(self,line1, line2):
        r1, t1 = line1
        r2, t2 = line2
        A = np.array([[np.cos(t1), np.sin(t1)], [np.cos(t2), np.sin(t2)]])
        b = np.array([r1, r2])
        if abs(t1 - t2) > 1.3:
            return np.round(np.linalg.solve(A, b)).astype(int)
        return None


    def points_inter(self,lines):
        intersections = []
        for i, g in enumerate(lines[:-1]):
            for g2 in lines[i+1:]:
                inter_pt = self.l_inter(g, g2)
                if inter_pt is not None:
                    intersections.append(inter_pt)
        return intersections


    def update_frame(self):
        self.display_camera_feed1(self.checked)
        
    def toggle_contour_detection(self, checked):
        self.checked = checked


    def set_focus(self,index):
        # Simulate changing focus
        self.current_focus = (self.current_focus + 10) % 30
        print(f'Focus set to: {self.current_focus}')
        if index == 1:
            if self.current_focus>= 0 and self.current_focus<20:
                self.video.set(cv2.CAP_PROP_FOCUS, self.current_focus)
            
        if index==0:
            if self.current_focus == 20:
                self.video.set(cv2.CAP_PROP_AUTOFOCUS,1)

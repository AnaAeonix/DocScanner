# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:/Users/pdas/AppData/Local/Temp/camDesignBrmUqu.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap, QFont
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import QLabel



class Ui_MainWindoww(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(798, 579)
        MainWindow.setStyleSheet("background-color:white;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Create layouts
        self.mainLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.camLayout = QtWidgets.QVBoxLayout()
        self.showLayout = QtWidgets.QVBoxLayout()
        # Add layouts to central widget
        self.mainLayout.addLayout(self.camLayout)
        self.mainLayout.addLayout(self.showLayout)




        self.cam_label = QtWidgets.QLabel(self.centralwidget)
        # self.cam_label.setGeometry(QtCore.QRect(60, 50, 491, 431))
        # self.cam_label.setFrameShape(QtWidgets.QFrame.Plain)
        self.cam_label.setText("")
        self.cam_label.setObjectName("cam_label")
        self.cam_label.setFixedHeight(800)
        self.cam_label.setFixedWidth(800)
        self.camLayout.addWidget(self.cam_label,alignment=QtCore.Qt.AlignCenter)
        self.show_label = QtWidgets.QLabel(self.centralwidget)
        # self.show_label.setGeometry(QtCore.QRect(610, 10, 151, 471))
        self.show_label.setFrameShape(QtWidgets.QFrame.Box)
        self.show_label.setText("")
        self.show_label.setObjectName("show_label")
        self.show_label.setFixedWidth(300)
        self.showLayout.addWidget(self.show_label)
        self.shutter_btn = QtWidgets.QPushButton(self.centralwidget)
        # self.shutter_btn.setGeometry(QtCore.QRect(250, 510, 81, 41))
        self.shutter_btn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/icons/camera48.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.shutter_btn.setIcon(icon)
        self.shutter_btn.setIconSize(QtCore.QSize(40, 40))
        self.shutter_btn.setCheckable(True)
        self.shutter_btn.setAutoExclusive(True)
        self.shutter_btn.setFlat(True)
        self.shutter_btn.setObjectName("shutter_btn")
        self.camLayout.addWidget(self.shutter_btn, alignment=QtCore.Qt.AlignCenter)
        self.done_btn = QtWidgets.QPushButton(self.centralwidget)
        # self.done_btn.setGeometry(QtCore.QRect(650, 510, 75, 23))
        self.done_btn.setStyleSheet("#done_btn QPushButton:hover {\n"
"        background-color: rgba( 86, 101, 115, 0.5);\n"
"    }")
        self.done_btn.setStyleSheet("background-color: #039FDB; color: white;")
        self.done_btn.setCheckable(True)
        self.done_btn.setAutoRepeat(False)
        self.done_btn.setAutoExclusive(True)
        self.done_btn.setObjectName("done_btn")
        self.camLayout.addWidget(self.done_btn, alignment=QtCore.Qt.AlignCenter)
        self.drop_down = QtWidgets.QComboBox(self.centralwidget)
        # self.drop_down.setGeometry(QtCore.QRect(230, 10, 69, 22))
        self.drop_down.setObjectName("drop_down")
        self.camLayout.addWidget(self.drop_down, alignment=QtCore.Qt.AlignCenter)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Scanner"))
        self.done_btn.setText(_translate("MainWindow", "Done"))
import camResource_rc
import threading

class VideoStream:
    def __init__(self, parent_label: QLabel, camera_index):
        self.video = cv2.VideoCapture(camera_index)
        self.parent_label = parent_label
        self.set_resolution()
        self.timer = None
        self.camera_change_thread = None  # Thread for camera switching

    def set_resolution(self):
        # Check if camera is open
        if not self.video.isOpened():
            print("Error opening camera")
            return

        # Check if 4K resolution is supported
        # Typo fix in height value
        self.video.set(cv2.CAP_PROP_FRAME_WIDTH, 3840)
        self.video.set(cv2.CAP_PROP_FRAME_HEIGHT, 2160)
        width = int(self.video.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(self.video.get(cv2.CAP_PROP_FRAME_HEIGHT))

        print(width)
        print(height)
        # if width == 3840 and height == 2160:
        #     print("Using 4K resolution")
        # else:
        #     self.video.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
        #     self.video.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
        #     print("Using 1080p resolution")
        # ... (rest of your set_resolution logic)

    def display_camera_feed(self):
        if not self.video.isOpened():
            # Display error message if camera not open
          font = QFont()
          font.setPointSize(30)
          self.parent_label.setFont(font)
          self.parent_label.setText("<p style='font-size:20pt'>Changing Camera...</p>")
          return

        ret, frame = self.video.read()
        if ret:
            rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame_resized = cv2.resize(rgb_image, (640, 480))
            h, w, ch = frame_resized.shape
            bytes_per_line = ch * w
            q_img = QImage(frame_resized.data, w, h, bytes_per_line, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(q_img)
            self.parent_label.setPixmap(pixmap.scaled(self.parent_label.size(), Qt.KeepAspectRatio))
            
            # self.parent_label.setFixedSize(w, h)
        else:
            # Display loader while camera is changing
            self.show_loader()

    def change_camera(self, camera_index):
        # Stop the timer if it's running
        if self.timer is not None:
            self.timer.stop()

        # Create a thread for camera switching (optional, but recommended for responsiveness)
        self.camera_change_thread = threading.Thread(target=self._change_camera_in_thread, args=(camera_index,))
        self.camera_change_thread.start()
        # Display loader immediately
        self.show_loader()

    def _change_camera_in_thread(self, camera_index):
        # Release the current video capture
        self.video.release()

        # Open the new camera capture
        self.video = cv2.VideoCapture(camera_index, cv2.CAP_DSHOW)
        self.set_resolution()

        # Create a QTimer object and connect it to the display_camera_feed function (in main thread)
        self.timer = QTimer()
        self.timer.timeout.connect(self.display_camera_feed)
        self.timer.start(10)  # Start the timer with a 10ms interval

    def show_loader(self):
        font = QFont()
        font.setPointSize(30)
        self.parent_label.setFont(font)
        self.parent_label.setText("<p style='font-size:20pt'>Changing Camera...</p>")
